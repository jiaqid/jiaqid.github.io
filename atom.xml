<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jiaqid.github.io/</id>
    <title>Blog</title>
    <updated>2019-08-29T14:14:19.485Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jiaqid.github.io/"/>
    <link rel="self" href="https://jiaqid.github.io//atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://jiaqid.github.io//images/avatar.png</logo>
    <icon>https://jiaqid.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, Blog</rights>
    <entry>
        <title type="html"><![CDATA[使用本地锁搞定重复提交]]></title>
        <id>https://jiaqid.github.io//post/1</id>
        <link href="https://jiaqid.github.io//post/1">
        </link>
        <updated>2019-07-31T13:49:48.000Z</updated>
        <content type="html"><![CDATA[<p>SpringBoot是为了简化Spring应用的创建，运行，调试，部署等一系列问题而诞生的产物，自动装配的特性让我们可以更好的关注业务本身而不是外部XML配置，我们只需遵循规范，引入相关的依赖就可以轻易的搭建出一个web工程。</p>
<p>在平时开发中，如果网速比较慢的情况下，用户提交表单后，发现服务器半天都没有响应，那么用户可能会以为是自己没有提交表单，就会再点击提交按钮重复提交表单，我们开发中必须防止表单重复提交。</p>
<p>利用自定义注解，SpringAop，GuavaCache实现表单防止重复提交（不适用于分布式）<br>
<img src="https://jiaqid.github.io//post-images/1567086857107.png" alt=""></p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
	xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
	&lt;parent&gt;
		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
		&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
		&lt;version&gt;2.1.7.RELEASE&lt;/version&gt;
		&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
	&lt;/parent&gt;
	&lt;groupId&gt;com.example&lt;/groupId&gt;
	&lt;artifactId&gt;demo&lt;/artifactId&gt;
	&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
	&lt;name&gt;springboot-demo&lt;/name&gt;
	&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;

	&lt;properties&gt;
		&lt;java.version&gt;1.8&lt;/java.version&gt;
	&lt;/properties&gt;

	&lt;dependencies&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;
		&lt;/dependency&gt;

		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
			&lt;scope&gt;test&lt;/scope&gt;
		&lt;/dependency&gt;

		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
		&lt;/dependency&gt;

		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;
		&lt;/dependency&gt;

		&lt;dependency&gt;
			&lt;groupId&gt;com.google.guava&lt;/groupId&gt;
			&lt;artifactId&gt;guava&lt;/artifactId&gt;
			&lt;version&gt;21.0&lt;/version&gt;
		&lt;/dependency&gt;


	&lt;/dependencies&gt;
	&lt;build&gt;
		&lt;plugins&gt;
			&lt;plugin&gt;
				&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
				&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
			&lt;/plugin&gt;
		&lt;/plugins&gt;
	&lt;/build&gt;
&lt;/project&gt;
</code></pre>
<pre><code>package com.example;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Application {

	public static void main(String[] args) {
		SpringApplication.run(Application.class, args);
	}

}
</code></pre>
<pre><code>package com.example.annotation;

import java.lang.annotation.*;

@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Inherited
public @interface LocalLock {

    String key() default &quot;&quot;;

    /**
     * 过期时间 由于用的guava暂时就忽略 集成redis需要用到
     */
    int expire() default 5;

}
</code></pre>
<pre><code>package com.example.controller;

import com.example.annotation.LocalLock;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping(&quot;/index&quot;)
public class IndexController {

    /**
     *在接口上添加@LocalLock(key=&quot;index:arg[0]&quot;);意味着会将arg[0]
     * 替换成第一个参数的值，生成后的新key将被缓存起来
     */
    @LocalLock(key = &quot;index:arg[0]&quot;)
    @GetMapping
    public String index(@RequestParam String token){
        try {
            Thread.sleep(3000L);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println(token);
        return &quot;success-&quot;+token;
    }
}
</code></pre>
<pre><code>package com.example.interceptor;

import com.example.annotation.LocalLock;
import com.google.common.cache.Cache;
import com.google.common.cache.CacheBuilder;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.reflect.MethodSignature;
import org.springframework.context.annotation.Configuration;
import org.springframework.util.StringUtils;


import java.lang.reflect.Method;
import java.util.concurrent.TimeUnit;

/**
 * Lock拦截器（AOP）
 * 首先通过CacheBuilder.newBuilder()构建出缓存对象，设置好过期时间；
 * 其目的就是为了防止因程序崩溃锁得不到释放（当然如果单机这种方式程序都炸了，锁早没了，
 * 但这不妨碍写好
 * 在具体的interceptor()方法上采用的是Around(环绕增强），所有带LocalLock注解的都将被
 * 切面处理
 * 如果想更为灵活，key的生成规则可以定义接口形式
 * （可以参考org.springframework.cache.interceptor.KeyGenerator)
 *
 */
@Aspect
@Configuration
public class LockMethodInterceptor {

    private static final Cache&lt;String,Object&gt; CACHES= CacheBuilder.newBuilder()
            .maximumSize(1000)//最大缓存1000个
            .expireAfterWrite(5, TimeUnit.SECONDS)//设置写缓存后5秒过期
            .build();

    @Around(&quot;execution(public * *(..)) &amp;&amp; @annotation(com.example.annotation.LocalLock)&quot;)
    public Object interceptor(ProceedingJoinPoint pjp){
        MethodSignature signature= (MethodSignature) pjp.getSignature();
        Method method=signature.getMethod();
        LocalLock localLock=method.getAnnotation(LocalLock.class);
        String key=getKey(localLock.key(),pjp.getArgs());
        if(!StringUtils.isEmpty(key)){
            if(CACHES.getIfPresent(key)!=null){
                throw new RuntimeException(&quot;请勿重复请求&quot;);
            }
            //如果是第一次请求，就将key当前对象压入缓存中
            CACHES.put(key,key);
        }
        try {
            return pjp.proceed();
        }catch (Throwable throwable){
            throw new RuntimeException(&quot;服务器异常&quot;);
        }finally {
            CACHES.invalidate(key);
        }
    }

    /**
     * key的生成策略，如果想灵活可以写成接口与实现的方式
     */
    private String getKey(String keyExpress,Object[] args){
        for(int i=0;i&lt;args.length;i++){
            keyExpress=keyExpress.replace(&quot;arg[&quot;+i+&quot;]&quot;,args[i].toString());
        }
        return keyExpress;
    }


}
</code></pre>
]]></content>
    </entry>
</feed>